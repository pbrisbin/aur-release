#!/bin/sh
set -e

usage() {
  cat <<'EOM'
Usage: aur-release [-c COMMAND] [-deyn] [NAME [VERSION]]
Release an AUR package by updating or creating its AUR repository.

Options:
  -c COMMAND    Command to run when version is not given (or -e is passed).
                Default is $SHELL.
  -d            Treat the current directory as the AUR repository, and do not
                operate in a temporary clone. This will create a branch called
                aur tracking the remote aur/master branch.
  -e            Edit (via -c), even if version was given.
  -y            Yes, push to the remote -- don't require confirmation.
  -n            No test installation.

Arguments:
  NAME          Name of the AUR repository. Defaults to the basename of the
                current working directory.
  VERSION       Version to set in PKGBUILD (along with pkgrel=1). Default is
                empty (you are expected to adjust version manually).

EOM
}

clone_aur() {
  aur_repo=$1

  tmp=$(mktemp -d)
  trap 'rm -rf "$tmp"' EXIT

  git clone "$aur_repo" "$tmp"
  cd "$tmp"
}

create_aur_remote_if_necessary() {
  aur_repo=$1

  if ! git remote -v | grep -Fq aur.archlinux.org; then
    git remote add aur "$aur_repo"
  fi

  git fetch aur
  git checkout -b aur || git checkout aur
  git reset --hard aur/master
  git branch --set-upstream-to=aur/master
}

prepare_repository() {
  version=$1
  edit=$2
  cmd=$3

  if [ -z "$version" ] || [ "$edit" -eq 1 ]; then
    echo "Launching $cmd in AUR package repo"
    launch_edit_command "$cmd"
  fi

  if [ -n "$version" ]; then
    echo "Setting PKGBUILD version to $version"
    update_pkgbuild_version "$version"
  fi
}

update_pkgbuild_version() {
  version=$1
  version=${version#v} # strip v if present
  sed -i "s/^pkgver=.*$/pkgver=$version/" PKGBUILD
  sed -i "s/^pkgrel=.*$/pkgrel=1/" PKGBUILD
}

launch_edit_command() {
  cmd=$1

  if ! $cmd; then
    echo "$cmd returned non-zero" >&2
    exit 1
  fi
}

separate=1
edit=0
confirm=1
cmd=$SHELL
install=1

AUR=ssh://aur@aur.archlinux.org

while getopts hdeyc:n opt; do
  case "$opt" in
    h)
      usage
      exit 0
      ;;
    d) separate=0 ;;
    e) edit=1 ;;
    y) confirm=0 ;;
    c) cmd=$OPTARG ;;
    n) install=0 ;;
    [?])
      usage >&2
      exit 64
      ;;
  esac
done
shift $((OPTIND - 1))

name=${1:-$(basename "$PWD")}
version=$2

echo "Releasing $name-${version:-unknown}"

if [ "$separate" -eq 1 ]; then
  echo "Releasing in separate AUR repository"
  clone_aur "$AUR/$name"
  prepare_repository "$version" "$edit" "$cmd"
else
  echo "Releasing in this directory"
  create_aur_remote_if_necessary "$AUR/$name"
  prepare_repository "$version" "$edit" "$cmd"
fi

updpkgsums
makepkg --printsrcinfo >.SRCINFO

if [ "$install" -eq 1 ]; then
  echo "Performing test installation..."
  makepkg --syncdeps --install --force
fi

git add .SRCINFO PKGBUILD
git diff --cached

if [ "$confirm" -eq 1 ]; then
  printf "Continue? [y/n] "
  read -r ans
  [ "$ans" != y ] && exit 1
fi

if [ -n "$version" ]; then
  git commit -m "Release v$version"
else
  git commit
fi

if [ "$separate" -eq 1 ]; then
  git push
else
  git push aur aur:master
  git checkout -
fi
